const AllShape = [
    [
        //0
        [90, 180], [90, 270], [90, 270], [180, 270],
        [0, 180], [90, 180], [180, 270], [0, 180],
        [0, 180], [0, 180], [0, 180], [0, 180],
        [0, 180], [0, 180], [0, 180], [0, 180],
        [0, 180], [0, 90], [0, 270], [0, 180],
        [0, 90], [90, 270], [90, 270], [0, 270],
    ],
    [
        //1
        [90, 180], [90, 270], [180, 270], [225, 225],
        [0, 90], [180, 270], [0, 180], [225, 225],
        [225, 225], [0, 180], [0, 180], [225, 225],
        [225, 225], [0, 180], [0, 180], [225, 225],
        [90, 180], [0, 270], [0, 90], [180, 270],
        [0, 90], [90, 270], [90, 270], [0, 270],
    ],
    [
        //2
        [90, 180], [90, 270], [90, 270], [180, 270],
        [0, 90], [90, 270], [180, 270], [0, 180],
        [90, 180], [90, 270], [0, 270], [0, 180],
        [0, 180], [90, 180], [90, 270], [0, 270],
        [0, 180], [0, 90], [90, 270], [180, 270],
        [0, 90], [90, 270], [90, 270], [0, 270],
    ],
    [
        //3
        [90, 180], [90, 270], [90, 270], [180, 270],
        [0, 90], [90, 270], [180, 270], [0, 180],
        [90, 180], [90, 270], [0, 270], [0, 180],
        [0, 90], [90, 270], [180, 270], [0, 180],
        [90, 180], [90, 270], [0, 270], [0, 180],
        [0, 90], [90, 270], [90, 270], [0, 270],
    ],
    [
        //4
        [90, 180], [180, 270], [90, 180], [180, 270],
        [0, 180], [0, 180], [0, 180], [0, 180],
        [0, 180], [0, 90], [0, 270], [0, 180],
        [0, 90], [90, 270], [180, 270], [0, 180],
        [225, 225], [225, 225], [0, 180], [0, 180],
        [225, 225], [225, 225], [0, 90], [0, 270],
    ],
    [
        //5
        [90, 180], [90, 270], [90, 270], [180, 270],
        [0, 180], [90, 180], [90, 270], [0, 270],
        [0, 180], [0, 90], [90, 270], [180, 270],
        [0, 90], [90, 270], [180, 270], [0, 180],
        [90, 180], [90, 270], [0, 270], [0, 180],
        [0, 90], [90, 270], [90, 270], [0, 270],
    ],
    [
        //6
        [90, 180], [90, 270], [90, 270], [180, 270],
        [0, 180], [90, 180], [90, 270], [0, 270],
        [0, 180], [0, 90], [90, 270], [180, 270],
        [0, 180], [90, 180], [180, 270], [0, 180],
        [0, 180], [0, 90], [0, 270], [0, 180],
        [0, 90], [90, 270], [90, 270], [0, 270],
    ],
    [
        //7
        [90, 180], [90, 270], [90, 270], [180, 270],
        [0, 90], [90, 270], [180, 270], [0, 180],
        [225, 225], [225, 225], [0, 180], [0, 180],
        [225, 225], [225, 225], [0, 180], [0, 180],
        [225, 225], [225, 225], [0, 180], [0, 180],
        [225, 225], [225, 225], [0, 90], [0, 270],
    ],
    [
        //8
        [90, 180], [90, 270], [90, 270], [180, 270],
        [0, 180], [90, 180], [180, 270], [0, 180],
        [0, 180], [0, 90], [0, 270], [0, 180],
        [0, 180], [90, 180], [180, 270], [0, 180],
        [0, 180], [0, 90], [0, 270], [0, 180],
        [0, 90], [90, 270], [90, 270], [0, 270],
    ],
    [
        //9
        [90, 180], [90, 270], [90, 270], [180, 270],
        [0, 180], [90, 180], [180, 270], [0, 180],
        [0, 180], [0, 90], [0, 270], [0, 180],
        [0, 90], [90, 270], [180, 270], [0, 180],
        [90, 180], [90, 270], [0, 270], [0, 180],
        [0, 90], [90, 270], [90, 270], [0, 270],
    ],
];

const getPinByTime = (time?: Date, pos?: { part: number, x: number, y: number, partIndex: number }): {
    min: number,
    hour: number
} => {
    if (!time || !pos) {
        return {min: 225, hour: 225};
    }
    let number: number = 0;
    const hour = String(time.getHours()).length > 1 ? String(time.getHours()) : '0' + String(time.getHours());
    const minute = String(time.getMinutes()).length > 1 ? String(time.getMinutes()) : '0' + String(time.getMinutes());
    switch (pos?.part) {
        case 1:
            number = Number(hour[0])
            break;
        case 2:
            number = Number(hour[1])
            break;
        case 3:
            number = Number(minute[0])
            break;
        case 4:
            number = Number(minute[1])
            break;
        default:
            number = 0
            break;
    }
    const shape = AllShape[number];
    return {
        min: shape[pos.partIndex][0],
        hour: shape[pos.partIndex][1],
    }

}

const getPinByRandom = (random: number, pos?: { part: number, x: number, y: number, partIndex: number }): {
    min: number,
    hour: number
} => {
    if (!pos) {
        return {min: 225, hour: 225};
    }
    const {x, y} = pos;
    const angle =
        y < 0
            ? (Math.atan(x / y) * 180) / Math.PI
            : x > 0
                ? (Math.atan(x / y) * 180) / Math.PI + 180
                : (Math.atan(x / y) * 180) / Math.PI - 180;
    const range = [0, 10, 22.5, 30, 45, 60, 90, 120, 150]
    const r = Math.floor(random * range.length)
    const isFlat = Math.floor(random * 10) % 2
    const offset = range[r]
    const min = angle + offset
    const hour = angle + (isFlat ? 1 : -1) * offset + isFlat * 180
    return {
        min,
        hour
    }
}

export default getPinByTime
export {getPinByRandom}